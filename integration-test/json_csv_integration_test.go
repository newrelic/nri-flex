// +build integration
// +build linux

// The tests in this file are supposed to be run in the CI using docker-compose
// You can run then from the IDE or manually but you'll need some setup first
package integration_test

import (
	"fmt"
	"github.com/newrelic/infra-integrations-sdk/data/metric"
	"github.com/stretchr/testify/assert"
	"os"
	"path/filepath"
	"strings"
	"testing"

	"github.com/newrelic/infra-integrations-sdk/integration"
	"github.com/newrelic/nri-flex/internal/config"
	"github.com/newrelic/nri-flex/internal/load"
)

type Metrics []map[string]interface{}

func runConfigFile(t *testing.T, configFile string) []*metric.Set {
	// given a fresh flex environment
	load.Refresh()

	// and a new integration with an entity
	i, _ := integration.New(load.IntegrationName, load.IntegrationVersion)
	load.Entity, _ = i.Entity("IntegrationTest", "nri-flex")

	// and a flex config file
	load.Args.ConfigFile = configFile

	// when we read and load the config file
	var files []os.FileInfo
	var configs []load.Config
	file, err := os.Stat(load.Args.ConfigFile)
	if err != nil {
		panic("config file not found: " + load.Args.ConfigFile)
	}
	path := strings.Replace(filepath.FromSlash(load.Args.ConfigFile), file.Name(), "", -1)
	files = append(files, file)
	config.LoadFiles(&configs, files, path)

	// and we run the flex integration
	config.RunFiles(&configs)

	// then we return the metrics generated by the integration
	return load.Entity.Metrics
}

func isMapSubset(subset, superset map[string]interface{}) error {
	for k, v := range subset {
		if w, ok := superset[k]; !ok {
			return fmt.Errorf("key %s not found", k)
		} else if v != w {
			return fmt.Errorf("key %s has the wrong value. Expecting %v (%T) but got %v (%T)", k, v, v, w, w)
		}
	}

	return nil
}

func TestConfig_Read_Files(t *testing.T) {
	tests := map[string]struct {
		configFile string
		want       Metrics
	}{
		"jsonEtcdSelf": {"configs/json-test.yml", Metrics{
			{
				"id":                   "eca0338f4ea31566",
				"name":                 "node3",
				"recvAppendRequestCnt": float64(5944),
				"recvBandwidthRate":    float64(570.625493),
				"recvPkgRate":          float64(9.008928),
				"sendAppendRequestCnt": float64(0),
				"startTime":            "2014-10-24T13:15:50.072007085-07:00",
				"state":                "StateFollower",
			},
			{
				"leader":    "8a69d5f6b7814500",
				"timestamp": "2014-10-24T13:15:51.186620747-07:00",
				"uptime":    "10m59.322358947s",
			},
		},
		},
		"csvTest": {"configs/csv-test.yml", Metrics{
			{
				"first":    "Mitchell",
				"last":     "Peterson",
				"address":  "696 Asuom Parkway",
				"fullName": "Peterson, Mitchell",
				"agenda":   "customers",
			},
			{
				"first":    "Lee",
				"last":     "Freeman",
				"address":  "1252 Caid Way",
				"fullName": "Freeman, Lee",
				"agenda":   "customers",
			},
			{
				"first":    "Evelyn",
				"last":     "Dean",
				"address":  "1518 Afziz Trail",
				"fullName": "Dean, Evelyn",
				"agenda":   "customers",
			},
		},
		},
	}

	for name, tc := range tests {
		t.Run(name, func(t *testing.T) {
			flexOutput := runConfigFile(t, tc.configFile)

			for i, metrics := range tc.want {
				assert.NoError(t, isMapSubset(metrics, flexOutput[i].Metrics))
			}
		})
	}
}
