###
# To be used with NR Infrastructure v1.8+
# https://docs.newrelic.com/docs/integrations/integrations-sdk/file-specifications/integration-configuration-file-specifications-agent-v180
###
# Collects a variety of networking information available from the host
# Depends on: netstat, conntrack, dig, /proc/net/dev
---
integrations:
  - name: nri-flex
    interval: 30s
    config:
      name: NetworkData
      apis:
        - name: ResolveExternalAndInternalAddrInfo
          run_async: true
          url: https://ifconfig.co/json
          merge: HostNetworkSample
        - name: HostInfo
          run_async: true
          commands:
            - run: "printf fullHostname:: && hostname"
              split_by: "::"
            - run: "printf shortHostname:: && hostname -s"
              split_by: "::"
            - run: "hostname -I"
              split: horizontal
              regex_match: true
              split_by: (\d+\.\d+\.\d+\.\d+)
              set_header: [localIp]
          merge: HostNetworkSample
        - name: NetstatTcpConnections # discover tcp connections
          commands:
            - name: NetstatConnection
              run: "netstat -atpe -W --numeric-ports --numeric-hosts" # TCP samples
              split: horizontal
              regex_match: true
              # the below regex works on linux | does not work on mac
              split_by: (\S+)\s+(\d+)\s+(\d+)\s+(\S+):(\S+)\s+(\S+):(\S+)\s+(\S+)\s+(\S+)\s+(\d+)\s+(\d+|-)
              set_header:
                - protocol
                - recvQBytes
                - sendQBytes
                - localAddress
                - localAddressPort
                - foreignAddress
                - foreignAddressPort
                - state
                - user
                - inode
                - pid
          store_lookups:
            foreignAddress: foreignAddress
          merge: NetstatConnectionSample
          join_key: foreignAddress
          value_mapper:
            foreignAddressPort:
              - (\*)=>0
            localAddressPort:
              - (\*)=>0
        - name: NetstatUdpConnections # discover udp connections
          commands:
            - name: NetstatConnection
              run: "netstat -aupe -W --numeric-ports --numeric-hosts" # UDP samples
              split: horizontal
              regex_match: true
              split_by: (\S+)\s+(\d+)\s+(\d+)\s+(\S+):(\S+)\s+(\S+):(\S+)\s+(\S+)\s+(\d+)\s+(\d+|-)
              set_header: # udp does not have state
                - protocol
                - recvQBytes
                - sendQBytes
                - localAddress
                - localAddressPort
                - foreignAddress
                - foreignAddressPort
                - user
                - inode
                - pid
          store_lookups:
            foreignAddresses: foreignAddress
          merge: NetstatConnectionSample
          join_key: foreignAddress
          value_mapper:
            foreignAddressPort:
              - (\*)=>0
            localAddressPort:
              - (\*)=>0
        - name: ResolvedAddress
          commands:
            - name: dig
              run: >
                printf resolvedForeignAddress:$(dig -x ${lookup:foreignAddress} +short | head -c -2)
              split_by: ":"
          custom_attributes:
            foreignAddress: ${lookup:foreignAddress}
          merge: NetstatConnectionSample
          join_key: foreignAddress
        - name: NetstatIp # summarized ip data
          run_async: true
          commands:
            - run: "netstat -s -W | grep -i -A 8 ip:"
              split_output: ^(ip:|Ip:)$
              regex_matches:
                - expression: (\d+) total packets received
                  keys: [totalPacketsReceived]
                - expression: (\d+) with invalid addresses
                  keys: [packetsReceivedWithInvalidAddresses]
                - expression: (\d+) forwarded
                  keys: [forwardedPackets]
                - expression: (\d+) incoming packets discarded
                  keys: [incomingPacketsDiscarded]
                - expression: (\d+) incoming packets delivered
                  keys: [incomingPacketsDelivered]
                - expression: (\d+) requests sent out
                  keys: [requestsSentOut]
                - expression: (\d+) outgoing packets dropped
                  keys: [outgoingPacketsDropped]
                - expression: (\d+) dropped because of missing route
                  keys: [packetsDroppedBecauseOfMissingRoute]
        - name: NetstatIcmpCore # summarized icmp data
          run_async: true
          merge: NetstatIcmpSample
          commands:
            - run: "netstat -s -W | grep -i -A 8 icmp:"
              split_output: ^(icmp:|Icmp:)$
              regex_matches:
                - expression: (\d+) ICMP messages received
                  keys: [icmpMessagesReceived]
                - expression: (\d+) input ICMP message failed
                  keys: [icmpInputMessagesFailed]
                - expression: (\d+) ICMP messages sent
                  keys: [icmpMessagesSent]
                - expression: (\d+) ICMP messages failed
                  keys: [icmpMessagesFailed]
        - name: NetstatIcmpInputDestUnreachable
          run_async: true
          merge: NetstatIcmpSample
          commands:
            - run: netstat -s -W | grep -i -A 1 "icmp input"
              split_output: "ICMP input histogram:"
              regex_matches:
                - expression: >-
                    destination unreachable: (\d+)
                  keys: [icmpInputHistogramDestinationUnreachable]
        - name: NetstatIcmpOutputDestUnreachable
          run_async: true
          merge: NetstatIcmpSample
          commands:
            - run: netstat -s -W | grep -i -A 1 "icmp output"
              split_output: "ICMP output histogram:"
              regex_matches:
                - expression: >-
                    destination unreachable: (\d+)
                  keys: [icmpOutputHistogramDestinationUnreachable]
        - name: NetstatIcmpMsg
          run_async: true
          merge: NetstatIcmpSample
          commands:
            - run: netstat -s -W | grep -i -A 2 "icmpmsg:"
              split_output: "IcmpMsg:"
              regex_matches:
                - expression: >-
                    InType3: (\d+)
                  keys: [inType3]
                - expression: >-
                    OutType3: (\d+)
                  keys: [outType3]
        - name: NetstatTcp # summarized tcp data
          run_async: true
          commands:
            - run: "netstat -s -W | grep -i -A 11 tcp:"
              split_output: ^(tcp:|Tcp:)$
              regex_matches:
                - expression: (\d+) active connections openings
                  keys: [activeConnectionsOpenings]
                - expression: (\d+) passive connection openings
                  keys: [passiveConnectionsOpenings]
                - expression: (\d+) failed connection attempts
                  keys: [failedConnectionAttempts]
                - expression: (\d+) connection resets received
                  keys: [connectionResetsReceived]
                - expression: (\d+) connections established
                  keys: [connectionsEstablished]
                - expression: (\d+) segments received
                  keys: [segmentsReceived]
                - expression: (\d+) segments send out
                  keys: [segmentsSendOut]
                - expression: (\d+) segments retransmited
                  keys: [segmentsRetransmitted]
                - expression: (\d+) bad segments received
                  keys: [badSegmentsReceived]
                - expression: (\d+) resets sent
                  keys: [resetsSent]
                - expression: >-
                    InCsumErrors: (\d+)
                  keys: [inCsumErrors]
        - name: NetstatUdp # summarized udp data
          run_async: true
          commands:
            - run: "netstat -s -W | grep -i -A 7 udp:"
              split_output: ^(udp:|Udp:)$
              regex_matches:
                - expression: (\d+) packets received
                  keys: [packetsReceived]
                - expression: (\d+) packets to unknown port received
                  keys: [packetsToUnknownPortReceived]
                - expression: (\d+) packet receive errors
                  keys: [packetReceiveErrors]
                - expression: (\d+) packets sent
                  keys: [packetsSent]
                - expression: (\d+) receive buffer errors
                  keys: [receiveBufferErrors]
                - expression: (\d+) send buffer errors
                  keys: [sendBufferErrors]
        - name: NetworkInterfaceData # network interface data
          run_async: true
          commands:
            - run: cat /proc/net/dev
              split: horizontal
              row_start: 2
              set_header:
                - interface
                - receiveBytes
                - receivePackets
                - receiveErrors
                - receiveDrop
                - receiveFifo
                - receiveFrame
                - receiveCompressed
                - receiveMulticast
                - transmitBytes
                - transmitPackets
                - transmitErrors
                - transmitDrop
                - transmitFifo
                - transmitFrame
                - transmitCompressed
                - transmitMulticast
              regex_match: true
              split_by: (\S+):\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)
          merge: NetworkInterfaceSample
          join_key: interface
        - name: NetworkInterfaceSpeed # network interface speed
          # Indicates the interface latest or current speed value. Value is an integer representing the link speed in Mbits/sec.
          # Note: This attribute is only valid for interfaces that implement the ethtool get_link_ksettings method (mostly Ethernet).
          # !!!   May not be available for some virtualization technologies such as AWS EC2s where it is vendor managed
          run_async: true
          commands:
            - run: >-
                for i in $(netstat -i | cut -f1 -d" " | tail -n+3) ; do echo "$i:$(cat /sys/class/net/"$i"/speed 2> /dev/null)" ; done
              split: horizontal
              set_header:
                - interface
                - speed
              regex_match: true
              split_by: >-
                (\S+):(\d+)
          merge: NetworkInterfaceSample
          join_key: interface
        - name: Conntrack
          ### note this requires conntrack installed
          ### if manually testing conntrack requires sudo/root permissions
          run_async: true
          commands:
            - run: conntrack -S
              split: horizontal
              set_header:
                - cpu
                - found
                - invalid
                - ignore
                - insert
                - insertFailed
                - drop
                - earlyDrop
                - error
                - searchRestart
              regex_match: true
              split_by: cpu=(\d+)\s+found=(\d+)\s+invalid=(\d+)\s+ignore=(\d+)\s+insert=(\d+)\s+insert_failed=(\d+)\s+drop=(\d+)\s+early_drop=(\d+)\s+error=(\d+)\s+search_restart=(\d+)
