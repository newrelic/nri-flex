# NOTE: 'database' is an experimental API at this time
# ref: https://github.com/newrelic/nri-flex/blob/master/docs/experimental/db.md
---
integrations:
  - name: nri-flex
    # interval: 30s
    config:
      name: MySQLDbFlex
      apis:
        - database: mysql
          # connection string for an rds mysql instance. Be sure to use the writer endpoint here.  /sys is the default database. newrelic:Password is the user:pass.
          db_conn: newrelic:Password@tcp(rds-name.region.rds.amazonaws.com:3306)/sys 
          logging:
            open: true
          # custom_attributes: # applies to all queries
          #   host: AuroraMySQL # custom host name atribute
          db_async: true # process queries async
          db_queries:
            - name: MySQLShowVars
              run: SHOW VARIABLES;
              custom_attributes: # can apply additional at a nested level
                attype: show-vars
                host: AuroraMySQL
            - name: MySQLShowStatus
              run: SHOW STATUS LIKE 'Max%conn%';
              custom_attributes: # can apply additional at a nested level
                attype: used-conns
                host: AuroraMySQL
            - name: MySQLCustomProcessList
              run: SELECT * FROM INFORMATION_SCHEMA.PROCESSLIST # grab all processes from MySQL
              custom_attributes: # can apply additional at a nested level
                attype: info-schema-query
                host: AuroraMySQL
            - name: MySQLCustomBlocking
              run: SELECT r.trx_id waiting_trx_id,r.trx_mysql_thread_id waiting_thread,r.trx_query waiting_query,b.trx_id blocking_trx_id,b.trx_mysql_thread_id blocking_thread,b.trx_query blocking_query
                   FROM information_schema.innodb_lock_waits w
                   INNER JOIN information_schema.innodb_trx b
                   ON b.trx_id = w.blocking_trx_id
                   INNER JOIN information_schema.innodb_trx r
                   ON r.trx_id = w.requesting_trx_id;
              custom_attributes: # can apply additional at a nested level
                attype: blocking-query
                host: AuroraMySQL
        - database: mysql
          # connection string for a local mysql instance. Be sure to use localhost here.  /sys is the default database. newrelic:Password is the user:pass.
          db_conn: newrelic:Password@tcp(localhost:3306)/sys 
          logging:
            open: true
          # custom_attributes: # applies to all queries
          #   host: UbuntuMySQL # custom host name atribute
          db_async: true # process queries async
          db_queries:
            - name: MySQLShowVars
              run: SHOW VARIABLES;
              custom_attributes: # can apply additional at a nested level
                attype: show-vars
                host: LocalMySQL
            - name: MySQLShowStatus
              run: SHOW STATUS LIKE 'Max%conn%';
              custom_attributes: # can apply additional at a nested level
                attype: used-conns
                host: LocalMySQL
            - name: MySQLCustomProcessList
              run: SELECT * FROM INFORMATION_SCHEMA.PROCESSLIST # grab all processes from MySQL
              custom_attributes: # can apply additional at a nested level
                attype: info-schema-query
                host: LocalMySQL
            - name: MySQLCustomBlocking
              run: SELECT r.trx_id waiting_trx_id,r.trx_mysql_thread_id waiting_thread,r.trx_query waiting_query,b.trx_id blocking_trx_id,b.trx_mysql_thread_id blocking_thread,b.trx_query blocking_query
                   FROM information_schema.innodb_lock_waits w
                   INNER JOIN information_schema.innodb_trx b
                   ON b.trx_id = w.blocking_trx_id
                   INNER JOIN information_schema.innodb_trx r
                   ON r.trx_id = w.requesting_trx_id;
              custom_attributes: # can apply additional at a nested level
                attype: blocking-query
                host: LocalMySQL
